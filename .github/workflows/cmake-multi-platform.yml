name: CMake • multi‑platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        #--------- compiler matrix ------------
        c_compiler: [gcc, clang, cl]
        include:
          #── Windows / MSVC
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          #── Ubuntu / GCC
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          #── Ubuntu / Clang
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          # GCC / Clang tool‑chains are not pre‑installed on windows‑latest
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          # MSVC doesn’t exist on ubuntu‑latest
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    # ───────── checkout ─────────
    - uses: actions/checkout@v4

    # ───────── configure ────────
    - name: Configure CMake
      run: >
        cmake -B build
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S .

    # ───────── build ────────────
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    # ───────── run demos ────────
    - name: Run demos
      working-directory: build
      shell: bash
      run: |
        # Where are the exe’s?
        if [ "$RUNNER_OS" = "Windows" ]; then
          DIR="Release"; EXT=".exe"
        else
          DIR="."; EXT=""
        fi

        run_if_exists () {
          if [ -f "$DIR/$1$EXT" ]; then
            echo "── $1 ──"
            "$DIR/$1$EXT" "$2" || echo "(expected exit)"
          else
            echo "⏭  $1  (not built on this platform)"
          fi
        }

        run_if_exists stack_smashing AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        run_if_exists security_defenses
        run_if_exists security_measure_overhead
        run_if_exists return_oriented_prog

